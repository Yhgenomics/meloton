// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Message
{
    public partial class MessageToken
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageToken Deserialize(Stream stream)
        {
            var instance = new MessageToken();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageToken DeserializeLengthDelimited(Stream stream)
        {
            var instance = new MessageToken();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static MessageToken DeserializeLength(Stream stream, int length)
        {
            var instance = new MessageToken();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static MessageToken Deserialize(byte[] buffer)
        {
            var instance = new MessageToken();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Message.MessageToken Deserialize(byte[] buffer, Message.MessageToken instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Message.MessageToken Deserialize(Stream stream, Message.MessageToken instance)
        {
            if (instance.Token == null)
                instance.Token = new List<string>();
            if (instance.Expire == null)
                instance.Expire = new List<long>();
            if (instance.Address == null)
                instance.Address = new List<string>();
            if (instance.Port == null)
                instance.Port = new List<int>();
            if (instance.BlockId == null)
                instance.BlockId = new List<long>();
            if (instance.Index == null)
                instance.Index = new List<long>();
            if (instance.Size == null)
                instance.Size = new List<long>();
            if (instance.Offset == null)
                instance.Offset = new List<long>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Token.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.Expire.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Address.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 4 Varint
                    case 32:
                        // repeated
                        instance.Port.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 5 Varint
                    case 40:
                        // repeated
                        instance.BlockId.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        // repeated
                        instance.Index.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 7 Varint
                    case 56:
                        // repeated
                        instance.Size.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 8 Varint
                    case 64:
                        // repeated
                        instance.Offset.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Message.MessageToken DeserializeLengthDelimited(Stream stream, Message.MessageToken instance)
        {
            if (instance.Token == null)
                instance.Token = new List<string>();
            if (instance.Expire == null)
                instance.Expire = new List<long>();
            if (instance.Address == null)
                instance.Address = new List<string>();
            if (instance.Port == null)
                instance.Port = new List<int>();
            if (instance.BlockId == null)
                instance.BlockId = new List<long>();
            if (instance.Index == null)
                instance.Index = new List<long>();
            if (instance.Size == null)
                instance.Size = new List<long>();
            if (instance.Offset == null)
                instance.Offset = new List<long>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Token.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.Expire.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Address.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 4 Varint
                    case 32:
                        // repeated
                        instance.Port.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 5 Varint
                    case 40:
                        // repeated
                        instance.BlockId.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        // repeated
                        instance.Index.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 7 Varint
                    case 56:
                        // repeated
                        instance.Size.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 8 Varint
                    case 64:
                        // repeated
                        instance.Offset.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Message.MessageToken DeserializeLength(Stream stream, int length, Message.MessageToken instance)
        {
            if (instance.Token == null)
                instance.Token = new List<string>();
            if (instance.Expire == null)
                instance.Expire = new List<long>();
            if (instance.Address == null)
                instance.Address = new List<string>();
            if (instance.Port == null)
                instance.Port = new List<int>();
            if (instance.BlockId == null)
                instance.BlockId = new List<long>();
            if (instance.Index == null)
                instance.Index = new List<long>();
            if (instance.Size == null)
                instance.Size = new List<long>();
            if (instance.Offset == null)
                instance.Offset = new List<long>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        // repeated
                        instance.Token.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 2 Varint
                    case 16:
                        // repeated
                        instance.Expire.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        // repeated
                        instance.Address.Add(global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream));
                        continue;
                    // Field 4 Varint
                    case 32:
                        // repeated
                        instance.Port.Add((int)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 5 Varint
                    case 40:
                        // repeated
                        instance.BlockId.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 6 Varint
                    case 48:
                        // repeated
                        instance.Index.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 7 Varint
                    case 56:
                        // repeated
                        instance.Size.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                    // Field 8 Varint
                    case 64:
                        // repeated
                        instance.Offset.Add((long)global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream));
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, MessageToken instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.Token != null)
            {
                foreach (var i1 in instance.Token)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i1));
                }
            }
            if (instance.Expire != null)
            {
                foreach (var i2 in instance.Expire)
                {
                    // Key for field: 2, Varint
                    stream.WriteByte(16);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i2);
                }
            }
            if (instance.Address != null)
            {
                foreach (var i3 in instance.Address)
                {
                    // Key for field: 3, LengthDelimited
                    stream.WriteByte(26);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(i3));
                }
            }
            if (instance.Port != null)
            {
                foreach (var i4 in instance.Port)
                {
                    // Key for field: 4, Varint
                    stream.WriteByte(32);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i4);
                }
            }
            if (instance.BlockId != null)
            {
                foreach (var i5 in instance.BlockId)
                {
                    // Key for field: 5, Varint
                    stream.WriteByte(40);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i5);
                }
            }
            if (instance.Index != null)
            {
                foreach (var i6 in instance.Index)
                {
                    // Key for field: 6, Varint
                    stream.WriteByte(48);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i6);
                }
            }
            if (instance.Size != null)
            {
                foreach (var i7 in instance.Size)
                {
                    // Key for field: 7, Varint
                    stream.WriteByte(56);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i7);
                }
            }
            if (instance.Offset != null)
            {
                foreach (var i8 in instance.Offset)
                {
                    // Key for field: 8, Varint
                    stream.WriteByte(64);
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream,(ulong)i8);
                }
            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(MessageToken instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, MessageToken instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }
    }

}
