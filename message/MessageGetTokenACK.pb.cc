// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageGetTokenACK.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageGetTokenACK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessageGetTokenACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageGetTokenACK_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageGetTokenACK_2eproto() {
  protobuf_AddDesc_MessageGetTokenACK_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageGetTokenACK.proto");
  GOOGLE_CHECK(file != NULL);
  MessageGetTokenACK_descriptor_ = file->message_type(0);
  static const int MessageGetTokenACK_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, expire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, block_id_),
  };
  MessageGetTokenACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageGetTokenACK_descriptor_,
      MessageGetTokenACK::default_instance_,
      MessageGetTokenACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGetTokenACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageGetTokenACK));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageGetTokenACK_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageGetTokenACK_descriptor_, &MessageGetTokenACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageGetTokenACK_2eproto() {
  delete MessageGetTokenACK::default_instance_;
  delete MessageGetTokenACK_reflection_;
}

void protobuf_AddDesc_MessageGetTokenACK_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030MessageGetTokenACK.proto\"h\n\022MessageGet"
    "TokenACK\022\r\n\005token\030\001 \002(\t\022\016\n\006expire\030\002 \002(\003\022"
    "\r\n\005index\030\003 \002(\003\022\022\n\nrequest_id\030\004 \002(\t\022\020\n\010bl"
    "ock_id\030\005 \002(\003", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageGetTokenACK.proto", &protobuf_RegisterTypes);
  MessageGetTokenACK::default_instance_ = new MessageGetTokenACK();
  MessageGetTokenACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageGetTokenACK_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageGetTokenACK_2eproto {
  StaticDescriptorInitializer_MessageGetTokenACK_2eproto() {
    protobuf_AddDesc_MessageGetTokenACK_2eproto();
  }
} static_descriptor_initializer_MessageGetTokenACK_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessageGetTokenACK::kTokenFieldNumber;
const int MessageGetTokenACK::kExpireFieldNumber;
const int MessageGetTokenACK::kIndexFieldNumber;
const int MessageGetTokenACK::kRequestIdFieldNumber;
const int MessageGetTokenACK::kBlockIdFieldNumber;
#endif  // !_MSC_VER

MessageGetTokenACK::MessageGetTokenACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGetTokenACK)
}

void MessageGetTokenACK::InitAsDefaultInstance() {
}

MessageGetTokenACK::MessageGetTokenACK(const MessageGetTokenACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageGetTokenACK)
}

void MessageGetTokenACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_ = GOOGLE_LONGLONG(0);
  index_ = GOOGLE_LONGLONG(0);
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageGetTokenACK::~MessageGetTokenACK() {
  // @@protoc_insertion_point(destructor:MessageGetTokenACK)
  SharedDtor();
}

void MessageGetTokenACK::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void MessageGetTokenACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageGetTokenACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageGetTokenACK_descriptor_;
}

const MessageGetTokenACK& MessageGetTokenACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageGetTokenACK_2eproto();
  return *default_instance_;
}

MessageGetTokenACK* MessageGetTokenACK::default_instance_ = NULL;

MessageGetTokenACK* MessageGetTokenACK::New() const {
  return new MessageGetTokenACK;
}

void MessageGetTokenACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageGetTokenACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(expire_, index_);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_id_->clear();
      }
    }
    block_id_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageGetTokenACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageGetTokenACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expire;
        break;
      }

      // required int64 expire = 2;
      case 2: {
        if (tag == 16) {
         parse_expire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_)));
          set_has_expire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int64 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_request_id;
        break;
      }

      // required string request_id = 4;
      case 4: {
        if (tag == 34) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "request_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_block_id;
        break;
      }

      // required int64 block_id = 5;
      case 5: {
        if (tag == 40) {
         parse_block_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageGetTokenACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageGetTokenACK)
  return false;
#undef DO_
}

void MessageGetTokenACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageGetTokenACK)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required int64 expire = 2;
  if (has_expire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expire(), output);
  }

  // required int64 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->index(), output);
  }

  // required string request_id = 4;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->request_id(), output);
  }

  // required int64 block_id = 5;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->block_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageGetTokenACK)
}

::google::protobuf::uint8* MessageGetTokenACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGetTokenACK)
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required int64 expire = 2;
  if (has_expire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expire(), target);
  }

  // required int64 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->index(), target);
  }

  // required string request_id = 4;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->request_id(), target);
  }

  // required int64 block_id = 5;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->block_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGetTokenACK)
  return target;
}

int MessageGetTokenACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required int64 expire = 2;
    if (has_expire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire());
    }

    // required int64 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

    // required string request_id = 4;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // required int64 block_id = 5;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageGetTokenACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageGetTokenACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageGetTokenACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageGetTokenACK::MergeFrom(const MessageGetTokenACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_expire()) {
      set_expire(from.expire());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageGetTokenACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGetTokenACK::CopyFrom(const MessageGetTokenACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGetTokenACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MessageGetTokenACK::Swap(MessageGetTokenACK* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(expire_, other->expire_);
    std::swap(index_, other->index_);
    std::swap(request_id_, other->request_id_);
    std::swap(block_id_, other->block_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageGetTokenACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageGetTokenACK_descriptor_;
  metadata.reflection = MessageGetTokenACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
