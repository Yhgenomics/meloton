// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageRequestPutToken.proto

#ifndef PROTOBUF_MessageRequestPutToken_2eproto__INCLUDED
#define PROTOBUF_MessageRequestPutToken_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageRequestPutToken_2eproto();
void protobuf_AssignDesc_MessageRequestPutToken_2eproto();
void protobuf_ShutdownFile_MessageRequestPutToken_2eproto();

class MessageRequestPutToken;

// ===================================================================

class MessageRequestPutToken : public ::google::protobuf::Message {
 public:
  MessageRequestPutToken();
  virtual ~MessageRequestPutToken();

  MessageRequestPutToken(const MessageRequestPutToken& from);

  inline MessageRequestPutToken& operator=(const MessageRequestPutToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequestPutToken& default_instance();

  void Swap(MessageRequestPutToken* other);

  // implements Message ----------------------------------------------

  MessageRequestPutToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageRequestPutToken& from);
  void MergeFrom(const MessageRequestPutToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const char* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // required int64 block_id = 2;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  inline ::google::protobuf::int64 block_id() const;
  inline void set_block_id(::google::protobuf::int64 value);

  // required int64 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // required string file_name = 4;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // required int64 client_id = 5;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 5;
  inline ::google::protobuf::int64 client_id() const;
  inline void set_client_id(::google::protobuf::int64 value);

  // required int64 offset = 6;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 6;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MessageRequestPutToken)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_block_id();
  inline void clear_has_block_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_id_;
  ::google::protobuf::int64 block_id_;
  ::google::protobuf::int64 size_;
  ::std::string* file_name_;
  ::google::protobuf::int64 client_id_;
  ::google::protobuf::int64 offset_;
  friend void  protobuf_AddDesc_MessageRequestPutToken_2eproto();
  friend void protobuf_AssignDesc_MessageRequestPutToken_2eproto();
  friend void protobuf_ShutdownFile_MessageRequestPutToken_2eproto();

  void InitAsDefaultInstance();
  static MessageRequestPutToken* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageRequestPutToken

// required string request_id = 1;
inline bool MessageRequestPutToken::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageRequestPutToken::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageRequestPutToken::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageRequestPutToken::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& MessageRequestPutToken::request_id() const {
  // @@protoc_insertion_point(field_get:MessageRequestPutToken.request_id)
  return *request_id_;
}
inline void MessageRequestPutToken::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set:MessageRequestPutToken.request_id)
}
inline void MessageRequestPutToken::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageRequestPutToken.request_id)
}
inline void MessageRequestPutToken::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageRequestPutToken.request_id)
}
inline ::std::string* MessageRequestPutToken::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageRequestPutToken.request_id)
  return request_id_;
}
inline ::std::string* MessageRequestPutToken::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageRequestPutToken::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageRequestPutToken.request_id)
}

// required int64 block_id = 2;
inline bool MessageRequestPutToken::has_block_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageRequestPutToken::set_has_block_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageRequestPutToken::clear_has_block_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageRequestPutToken::clear_block_id() {
  block_id_ = GOOGLE_LONGLONG(0);
  clear_has_block_id();
}
inline ::google::protobuf::int64 MessageRequestPutToken::block_id() const {
  // @@protoc_insertion_point(field_get:MessageRequestPutToken.block_id)
  return block_id_;
}
inline void MessageRequestPutToken::set_block_id(::google::protobuf::int64 value) {
  set_has_block_id();
  block_id_ = value;
  // @@protoc_insertion_point(field_set:MessageRequestPutToken.block_id)
}

// required int64 size = 3;
inline bool MessageRequestPutToken::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageRequestPutToken::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageRequestPutToken::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageRequestPutToken::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 MessageRequestPutToken::size() const {
  // @@protoc_insertion_point(field_get:MessageRequestPutToken.size)
  return size_;
}
inline void MessageRequestPutToken::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:MessageRequestPutToken.size)
}

// required string file_name = 4;
inline bool MessageRequestPutToken::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageRequestPutToken::set_has_file_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageRequestPutToken::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageRequestPutToken::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& MessageRequestPutToken::file_name() const {
  // @@protoc_insertion_point(field_get:MessageRequestPutToken.file_name)
  return *file_name_;
}
inline void MessageRequestPutToken::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:MessageRequestPutToken.file_name)
}
inline void MessageRequestPutToken::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageRequestPutToken.file_name)
}
inline void MessageRequestPutToken::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageRequestPutToken.file_name)
}
inline ::std::string* MessageRequestPutToken::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageRequestPutToken.file_name)
  return file_name_;
}
inline ::std::string* MessageRequestPutToken::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageRequestPutToken::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageRequestPutToken.file_name)
}

// required int64 client_id = 5;
inline bool MessageRequestPutToken::has_client_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageRequestPutToken::set_has_client_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageRequestPutToken::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageRequestPutToken::clear_client_id() {
  client_id_ = GOOGLE_LONGLONG(0);
  clear_has_client_id();
}
inline ::google::protobuf::int64 MessageRequestPutToken::client_id() const {
  // @@protoc_insertion_point(field_get:MessageRequestPutToken.client_id)
  return client_id_;
}
inline void MessageRequestPutToken::set_client_id(::google::protobuf::int64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:MessageRequestPutToken.client_id)
}

// required int64 offset = 6;
inline bool MessageRequestPutToken::has_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageRequestPutToken::set_has_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageRequestPutToken::clear_has_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageRequestPutToken::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 MessageRequestPutToken::offset() const {
  // @@protoc_insertion_point(field_get:MessageRequestPutToken.offset)
  return offset_;
}
inline void MessageRequestPutToken::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:MessageRequestPutToken.offset)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageRequestPutToken_2eproto__INCLUDED
