// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageRegister.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageRegister.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessageRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRegister_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageRegister_2eproto() {
  protobuf_AddDesc_MessageRegister_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageRegister.proto");
  GOOGLE_CHECK(file != NULL);
  MessageRegister_descriptor_ = file->message_type(0);
  static const int MessageRegister_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, disk_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, block_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, data_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, data_port_),
  };
  MessageRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageRegister_descriptor_,
      MessageRegister::default_instance_,
      MessageRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageRegister));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageRegister_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageRegister_descriptor_, &MessageRegister::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageRegister_2eproto() {
  delete MessageRegister::default_instance_;
  delete MessageRegister_reflection_;
}

void protobuf_AddDesc_MessageRegister_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MessageRegister.proto\"j\n\017MessageRegist"
    "er\022\n\n\002id\030\001 \002(\t\022\022\n\ndisk_space\030\002 \002(\003\022\021\n\tbl"
    "ock_num\030\003 \002(\003\022\021\n\tdata_addr\030\004 \002(\t\022\021\n\tdata"
    "_port\030\005 \002(\005", 131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageRegister.proto", &protobuf_RegisterTypes);
  MessageRegister::default_instance_ = new MessageRegister();
  MessageRegister::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageRegister_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageRegister_2eproto {
  StaticDescriptorInitializer_MessageRegister_2eproto() {
    protobuf_AddDesc_MessageRegister_2eproto();
  }
} static_descriptor_initializer_MessageRegister_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessageRegister::kIdFieldNumber;
const int MessageRegister::kDiskSpaceFieldNumber;
const int MessageRegister::kBlockNumFieldNumber;
const int MessageRegister::kDataAddrFieldNumber;
const int MessageRegister::kDataPortFieldNumber;
#endif  // !_MSC_VER

MessageRegister::MessageRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageRegister)
}

void MessageRegister::InitAsDefaultInstance() {
}

MessageRegister::MessageRegister(const MessageRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageRegister)
}

void MessageRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disk_space_ = GOOGLE_LONGLONG(0);
  block_num_ = GOOGLE_LONGLONG(0);
  data_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRegister::~MessageRegister() {
  // @@protoc_insertion_point(destructor:MessageRegister)
  SharedDtor();
}

void MessageRegister::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (data_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_addr_;
  }
  if (this != default_instance_) {
  }
}

void MessageRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRegister_descriptor_;
}

const MessageRegister& MessageRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageRegister_2eproto();
  return *default_instance_;
}

MessageRegister* MessageRegister::default_instance_ = NULL;

MessageRegister* MessageRegister::New() const {
  return new MessageRegister;
}

void MessageRegister::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageRegister*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(disk_space_, block_num_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_data_addr()) {
      if (data_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_addr_->clear();
      }
    }
    data_port_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_disk_space;
        break;
      }

      // required int64 disk_space = 2;
      case 2: {
        if (tag == 16) {
         parse_disk_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disk_space_)));
          set_has_disk_space();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_block_num;
        break;
      }

      // required int64 block_num = 3;
      case 3: {
        if (tag == 24) {
         parse_block_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_num_)));
          set_has_block_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data_addr;
        break;
      }

      // required string data_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_data_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_addr().data(), this->data_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_port;
        break;
      }

      // required int32 data_port = 5;
      case 5: {
        if (tag == 40) {
         parse_data_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_port_)));
          set_has_data_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageRegister)
  return false;
#undef DO_
}

void MessageRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageRegister)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int64 disk_space = 2;
  if (has_disk_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->disk_space(), output);
  }

  // required int64 block_num = 3;
  if (has_block_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->block_num(), output);
  }

  // required string data_addr = 4;
  if (has_data_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_addr().data(), this->data_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data_addr(), output);
  }

  // required int32 data_port = 5;
  if (has_data_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->data_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageRegister)
}

::google::protobuf::uint8* MessageRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageRegister)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int64 disk_space = 2;
  if (has_disk_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->disk_space(), target);
  }

  // required int64 block_num = 3;
  if (has_block_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->block_num(), target);
  }

  // required string data_addr = 4;
  if (has_data_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_addr().data(), this->data_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data_addr(), target);
  }

  // required int32 data_port = 5;
  if (has_data_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->data_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageRegister)
  return target;
}

int MessageRegister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int64 disk_space = 2;
    if (has_disk_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->disk_space());
    }

    // required int64 block_num = 3;
    if (has_block_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_num());
    }

    // required string data_addr = 4;
    if (has_data_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_addr());
    }

    // required int32 data_port = 5;
    if (has_data_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageRegister::MergeFrom(const MessageRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_disk_space()) {
      set_disk_space(from.disk_space());
    }
    if (from.has_block_num()) {
      set_block_num(from.block_num());
    }
    if (from.has_data_addr()) {
      set_data_addr(from.data_addr());
    }
    if (from.has_data_port()) {
      set_data_port(from.data_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRegister::CopyFrom(const MessageRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MessageRegister::Swap(MessageRegister* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(disk_space_, other->disk_space_);
    std::swap(block_num_, other->block_num_);
    std::swap(data_addr_, other->data_addr_);
    std::swap(data_port_, other->data_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRegister_descriptor_;
  metadata.reflection = MessageRegister_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
